////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//
// Author: Someone who Implemented EyeLike
//
// Module: find_eye_center.hpp
//
// Timeperiod:
//
// unknown: Version 1.0: Created
// 21-Feb-15: Version 1.0: Refactored and added functions.
//
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#ifndef __EYE_CENTER_HPP__
#define __EYE_CENTER_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include <cstdio>
#include <iostream>
#include <queue>

#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/objdetect/objdetect.hpp>

#include "constants.hpp"
#include "helpers.hpp"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

extern cv::Mat* leftCornerKernel;
extern cv::Mat* rightCornerKernel;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

cv::Mat computeMatXGradient(const cv::Mat& mat);
cv::Point findEyeCenter(cv::Mat& face, cv::Rect& eye, const std::string& debugWindow);
cv::Mat floodKillEdges(cv::Mat& mat);
bool floodShouldPushPoint(cv::Point& np, cv::Mat& mat);
//void plotVecField(const cv::Mat& gradientX, const cv::Mat& gradientY, const cv::Mat& img);
void testPossibleCentersFormula(int x, int y, unsigned char weight,double gx, double gy, cv::Mat &out);
cv::Point unscalePoint(cv::Point p, cv::Rect origSize);

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#endif // __EYE_CENTER_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

