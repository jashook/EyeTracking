////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// 
// Author: Jarret Shook
// 
// Timeperiod: 
// 
// 05-Mar-15: Version 1.0: Created 
// 05-Mar-15: Version 1.0: Last Updated 
// 
// Notes: 
// 
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#ifndef __THREAD_DISPATCH_HPP__
#define __THREAD_DISPATCH_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include <std::thread>

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

class thread_dispatch
{
   private:  // Constructor | Desctructor

      thread_dispatch(std::size_t thread_count) { _ctor(thread_count); }
      ~thread_dispatch() { _dtor(); }

   public:  // Static Member Functions

      static thread_dispatch* const get_dispatch() 
      { 
         static thread_dispatch* s_dispatch = nullptr;
         
         if (thread_dispatch == nullptr)
         {
            std::size_t thread_count = std::thread::hardware_concurrancy();

            s_dispatch = new thread_dispatch(thread_count);
         }
         
         return s_dispatch;
      }

   public:  // Member Functions

      void join_all() { _join_all(); }
      void start_all() { _start_all(); }

   private: // Private Member functions

      void _ctor(size_t thread_count)
      {
         
      }

      void _join_all()
      {

      }

      void _start_all()
      {

      }

   private: // Member variables

      std::mutex _m_start_lock;
      std::vector<std::thread> _m_threads;

}; // end of class (find_eye_center)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#endif // __THREAD_DISPATCH_HPP__

////////////////////////////////////////////////////////////////////////////////
// End of file include/thread_dispatch.hpp
////////////////////////////////////////////////////////////////////////////////

