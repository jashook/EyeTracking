////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// 
// Author: Jarret Shook
// 
// Timeperiod: 
// 
// 05-Mar-15: Version 1.0: Created 
// 05-Mar-15: Version 1.0: Last Updated 
// 
// Notes: 
//
// This files provides an implementation of a read/writer lock.  The lock favors
// Writers.
//
// This class was written before C++14 had compiler support, therefore the
// shared_mutex class was not yet available.  Future support would allow for
// use of the standard function.
//
// All readers are forced to wait if there is one writer. Therefore, writers are
// favored.
//
// Use case: In situations where there are multiple readers and few writers,
// where writers write infrequently and readers read very frequently.
//
// All readers have no access to mutable data to conform to the definition of 
// a read/write lock.
//
// This code is for us in Windows (win64, winArm, win32) and POSIX (x86, x64, ARM)
// 
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#ifndef __READ_WRITE_LOCK_HPP__
#define __READ_WRITE_LOCK_HPP__

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include "cas_lock.hpp"

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

namespace ev10 {
namespace eIIe {

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

class rw_lock_w_favored
{
   public:  // Type definitions and Constants

      enum accessor_type { READER, WRITER }

   public:  // Constructor | Destructor

      rw_lock_w_favored() { _ctor(); }
      ~rw_lock_w_favored() { _dtor(); }

   public:  // Public Member Functions

      template<accessor_type __AccessorType> lock()
      {
         if (__AccessorType == READER)
         {
            // Check if there are any writers
            
            

         }

         else
         {

         }
      }

      template<accessor_type __AccessorType> unlock()
      {

      }

   private: // Member Variables

      ev10::eIIe::cas_lock _m_writer_lock;
      
      std::mutex _m_lock;

}; // end of class(rw_lock_w_favored)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

} // end of namespace(eIIe)
} // end of namespace(ev10)

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#endif // __READ_WRITE_LOCK_HPP__

////////////////////////////////////////////////////////////////////////////////
// End of file include/read_write_lock.hpp
////////////////////////////////////////////////////////////////////////////////

